swagger: '2.0'
info:
  version: 1.0.0
  title: Hash Documents Microservice
  description: Ruby on Rails + MySQL Database
  contact:
      name: Julián Camilo Jiménez Moreno
      email: jucjimenezmo@unal.edu.co
  license:
    name: Software Architecture 2017-II

consumes:
  - application/json
produces:
  - application/json
paths:
  /hashdocuments:
    post:
      summary: Creates a new register (hash-document)
      operationId: createHashdocument
      parameters:
        - name: hashdocument
          in: body
          required: true
          description: Hashdocument Object
          schema:
            $ref: '#/definitions/HashdocumentRequest'
      responses:
        '200':
          description: Created
          schema:
            $ref: '#/definitions/Hashdocument'
        '400':
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
    get:
      summary: Returns all hashdocuments
      operationId: getAllHashdocuments
      parameters:
        - name: firstResult
          in: query
          description: The first result to return
          required: false
          type: integer
        - name: maxResult
          in: query
          description: The maximum number of results to return
          required: false
          type: integer
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/HashdocumentsList'
        '406':
          description: Not Acceptable (Invalid Params)
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorModel'
  /hashdocuments/getOwnFiles/{id}:
    get:
      summary: Returns the files associated to the given id
      operationId: getOwnFiles
      parameters:
        - name: id
          in: path
          description: The user id to query
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/FileList'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /hashdocuments/getOwner/{id}:
    get:
      summary: Returns the owner for the given id
      operationId: getOwner
      parameters:
        - name: id
          in: path
          description: The id of the file to query
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/DocumentOwner'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
  /hashdocuments/{id}:
    get:
      summary: Returns a hashdocument (path) with the given id
      operationId: getHashdocumentById
      parameters:
        - name: id
          in: path
          description: The id of the product to be returned
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Hashdocument'
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    put:
      summary: Updates a hashdocument with the given id
      operationId: updateHashdocument
      parameters:
        - name: id
          in: path
          description: The id of the hashdocument to be updated
          required: true
          type: string
        - name: hashdocument
          in: body
          required: true
          description: Product Object
          schema:
            $ref: '#/definitions/HashdocumentRequest'
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

    delete:
      summary: Deletes a hasdocument with the given id
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          description: The id of the product to be deleted
          required: true
          type: string
      responses:
        '200':
          description: Ok
        '404':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '406':
            description: Not Acceptable (Invalid Params)
            schema:
              $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'

  /hashdocuments/getByPath:
    get:
      summary: Returns a hashdocument with the given path
      operationId: getByPath
      parameters:
        - name: path
          in: query
          description: The path of the hashdocument to be returned
          required: true
          type: string
      responses:
        '200':
          description: Ok
          schema:
            $ref: '#/definitions/Hashdocument'
        '400':
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorModel'
        '500':
          description: unexpected error
          schema:
            $ref: '#/definitions/ErrorModel'
definitions:
  DocumentOwner:
    type: object
    properties:
      owner:
        type: string
  FileList:
    type: object
    properties:
      total: 
        type: integer
      list:
        type: array
        items:
          type: integer
# Hashdocument
  Hashdocument:
    type: object
    properties:
      id:
        type: integer
      path:
        type: string
      createdDate:
        type: object #date
      updatedDate:
        type: object #date

  HashdocumentRequest:
    type: object
    properties:
      path:
        type: string

  HashdocumentsList:
    type: object
    required:
      - list
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/Hashdocument'

# Errors
  ErrorModel:
    type: object
    required:
      - status
      - message
    properties:
      status:
        type: number
      message:
        type: string
      description:
        type: object

# Added by jucjimenezmo for test
# host: 192.168.99.101:3003
# basePath: /
# schemes:
#   - http

# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /unal1/hashdocuments-microservice/1.0.0
schemes:
 - https
 - http
 